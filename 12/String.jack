// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array chars;
    field int length;
    field int mMaxLength;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
      if (maxLength < 0) {
        do Sys.error(14);
      }

      let mMaxLength = maxLength;
      let chars = Array.new(maxLength);
      let length = 0;
      return this;
    }

    /** Disposes this string. */
    method void dispose() {
      do Memory.deAlloc(chars);
      return;
    }

    /** Returns the current length of this string. */
    method int length() {
      return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
      if ((length - 1) < j) {
        do Sys.error(15);
      }

      return chars[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
      if ((length - 1) < j) {
        do Sys.error(16);
      }


      let chars[j] = c;
      return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
      if (length = mMaxLength) {
        do Sys.error(17);
      }


      let chars[length] = c;
      let length = length + 1;
      return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
      if (length = 0) {
        do Sys.error(18);
      }

      let chars[length] = 0;
      let length = length - 1;
      return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
      var int value, i;
      var char ch;
      var int sign;

      let value = 0;
      let i = 0;
      let sign = 1;

      if ( chars[0] = 45) {
        let i = 1;
        let sign = -1;
      }

      while (i < length) {
        let ch = chars[i];

        if ((47 < ch) & (ch < 58)) {
          // is digit
          let value = value * 10;
          let value = value + (ch - 48);
        }
        else {
          let value = value * sign;
          return value;
        }
  
        let i = i + 1;
      }

      let value = value * sign;
      return value;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {

      var int i, vDiv10, vMod10;
      var int st, ed;
      var char temp;

      let i = 0;
      let st = 0;

      if (val = 0) {
        let chars[0] = 48;
        let length = 1;
        return;
      }

      if (val < 0) {
        let chars[i] = 45; // '-'
        let i = i + 1;
        let val = -val;
        let st = 1;
      }

      while (val > 0) {
        let vDiv10 = val / 10;
//        let vMod10 = val - (10 * vDiv10);
        let vMod10 = Math.mod(val, 10);

        let chars[i] = 48 + vMod10;
        let val = vDiv10;
        let i = i + 1;

        if ((mMaxLength + 1) = i) {
          do Sys.error(19);
        }




      }

      let length = i;

      // revert
      let ed = length - 1;
      while ( st < ed ) {
        let temp = chars[st];
        let chars[st] = chars[ed];
        let chars[ed] = temp;

        let st = st + 1;
        let ed = ed - 1;
      }

      return;
    }

    /** Returns the new line character. */
    function char newLine() {
//      return 10;
      return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
//      return 8;
      return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
      return 34;
    }
}

// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
      var int i, v;

      let twoToThe = Array.new(16);
      let i = 0;
      let v = 1;

      while(i<16) {
        let twoToThe[i] = v;
        let v = v + v;
        let i = i + 1;
      }

      return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
      if (x < 0) {
        return -x;
      }

      return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
       var int abx, aby;
       var int sum;
       var int shiftedX;
       var int i, j;

       if ( (x = 0) | (y = 0)) {
         return 0;
       }



       let abx = Math.abs(x);
       let aby = Math.abs(y);

       let sum = 0;
       let shiftedX = abx;

       let j = 0;

       while (j < 16) {
         if (Math.bit(aby, j)) {
           let sum = sum + shiftedX;
         }
         let shiftedX = shiftedX + shiftedX;
         let j = j + 1;
       }

       if (((x < 0) & (y > 0)) | ((x > 0) & (y < 0))) {
         let sum = -sum;
       }

       return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */

    function int divide(int x, int y) {
      var int retVal;

      let retVal = Math.divide0(Math.abs(x), Math.abs(y));

      if (x < 0) {
         let retVal = -retVal;
      }

      if (y < 0) {
         let retVal = -retVal;
      }

      return retVal;
    }

    function int divide0(int x, int y) {
      var int q;

      if(y = 0) {
        do Sys.error(3);
      }

      // !!! important !!!
      if(y < 0) {
        return 0;
      }

      if(y > x) {
        return 0;
      }

      let q = Math.divide0(x, 2 * y);
      if (x - (2 * q * y) < y) {
        return (2 * q);
      }

      return (2 * q) + 1;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
      var int y, yy, yy1;
      var int i, j, two_pow_j;
      var int n;

      if (x < 0) {
        do Sys.error(4);
      }



      let n = 16;
      let y = 0;      
      let j = (n / 2) - 1;

      while ( j > -1 ) {
        let two_pow_j = twoToThe[j];

        let yy1 = (y + two_pow_j);
        let yy = yy1 * yy1;

        if (yy > 0) {
          if ( (yy < x) | (yy = x) ) {
            let y = yy1;
          }
        }

        let j = j - 1;
      }

      return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
       if (a > b) {
         return a;
       }
       return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
       if (a > b) {
         return b;
       }
       return a;
    }


    function bool bit(int x, int j) {
      return twoToThe[j] & x > 0;

//      var int retVal;
//
//      let retVal = ~((twoToThe[j] & x) = 0);
//
//      return retVal;
    }

    function int mod(int x, int y) {
        var int d;

        let d = x / y;
        
        return x - (d * y);
//      while (true) {
//        if (x < y) {
//          return x;
//        }
//
//        let x = x - y;
//      }
//      return 0;
    }
}
